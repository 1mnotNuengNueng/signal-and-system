import cv2
import numpy as np
import matplotlib.pyplot as plt
import os

gray = None          # ‡∏†‡∏≤‡∏û‡∏Ç‡∏≤‡∏ß‡∏î‡∏≥
blur = None          # ‡∏†‡∏≤‡∏û‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏ö‡∏•‡∏≠‡∏î‡πâ‡∏ß‡∏¢ Gaussian
G = None             # Gradient magnitude ‡∏à‡∏≤‡∏Å Sobel
theta = None         # ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏Ç‡∏≠‡∏á gradient
nms = None           # ‡∏ú‡∏•‡∏à‡∏≤‡∏Å Non-Maximum Suppression
dt = None            # ‡∏ú‡∏•‡∏à‡∏≤‡∏Å Double Threshold
weak = None          # ‡∏Ñ‡πà‡∏≤ intensity ‡∏Ç‡∏≠‡∏á‡∏Ç‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö weak
strong = None        # ‡∏Ñ‡πà‡∏≤ intensity ‡∏Ç‡∏≠‡∏á‡∏Ç‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö strong
final = None         # ‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏ö‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á hysteresis


def grayscale_image(image_path):
    """
    ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö:
    - ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡∏û‡∏≤‡∏ò‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏
    - ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏û‡∏Ç‡∏≤‡∏ß‡∏î‡∏≥ (Grayscale)
    - ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÉ‡∏ô ../result/grayscale_pic.jpg
    """
    global gray

    # ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û
    img = cv2.imread(image_path)

    # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≤‡∏ß‡∏î‡∏≥
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå result ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
    os.makedirs('../result', exist_ok=True)

    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û
    cv2.imwrite('../result/grayscale_pic.jpg', gray)

    # ‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û
    plt.imshow(gray, cmap='gray')
    plt.title('Grayscale Image')
    plt.axis('off')
    plt.show()


# --------------------------------------------------------------
def gaussian_kernel(size=21, sigma=5):
    """
    ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö:
    - ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå Gaussian ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏•‡∏≠‡∏†‡∏≤‡∏û
    - size ‡∏Ñ‡∏∑‡∏≠‡∏Ç‡∏ô‡∏≤‡∏î kernel (‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏µ‡πà)
    - sigma ‡∏Ñ‡∏∑‡∏≠‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢ (‡∏¢‡∏¥‡πà‡∏á‡∏°‡∏≤‡∏Å‡∏¢‡∏¥‡πà‡∏á‡πÄ‡∏ö‡∏•‡∏≠)
    """
    ax = np.linspace(-(size - 1) / 2., (size - 1) / 2., size)
    xx, yy = np.meshgrid(ax, ax)
    kernel = np.exp(-(xx**2 + yy**2) / (2. * sigma**2))
    return kernel / np.sum(kernel)


# --------------------------------------------------------------
def apply_gaussian_blur():
    """
    ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö:
    - ‡πÄ‡∏ö‡∏•‡∏≠‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏ß‡∏¢ Gaussian Filter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏£‡∏ö‡∏Å‡∏ß‡∏ô (Noise)
    - ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÉ‡∏ô ../result/blur_pic.jpg
    """
    global blur

    # ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û grayscale ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
    img = cv2.imread('../result/grayscale_pic.jpg')
    if img is None:
        print("‚ùå not found grayscale image")
        return

    # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô grayscale ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ô‡πà‡πÉ‡∏à
    gray_local = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á Gaussian Kernel
    kernel = gaussian_kernel()

    # ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏•‡∏≠‡∏†‡∏≤‡∏û
    blur = cv2.filter2D(gray_local, -1, kernel) # ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ convolution

    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û
    cv2.imwrite('../result/blur_pic.jpg', blur)

    # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
    plt.imshow(blur, cmap='gray')
    plt.title('Gaussian Blur')
    plt.axis('off')
    plt.show()


# --------------------------------------------------------------
def sobel_edge_detection():
    """
    ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö:
    - ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Ç‡∏≠‡∏ö‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏ß‡∏¢ Sobel Operator
    - ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ó‡∏±‡πâ‡∏á Gradient Magnitude (G) ‡πÅ‡∏•‡∏∞ Gradient Direction (theta)
    - ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÉ‡∏ô ../result/sobel_edge_pic.jpg
    """
    global G, theta

    # ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÄ‡∏ö‡∏•‡∏≠‡πÅ‡∏•‡πâ‡∏ß
    img = cv2.imread('../result/blur_pic.jpg', cv2.IMREAD_GRAYSCALE)
    if img is None:
        print("‚ùå not found blur image")
        return

    # Sobel Kernels
    Kx = np.array([[-1,0,1],
                   [-2,0,2],
                   [-1,0,1]])
    Ky = np.array([[1,2,1],
                   [0,0,0],
                   [-1,-2,-1]])

    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Gradient
    Gx = cv2.filter2D(img, cv2.CV_64F, Kx) # ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ convolution
    plt.imshow(Gx, cmap='gray')
    plt.title('Sobel Gradient X-axis')
    plt.axis('off')
    plt.show()
    Gy = cv2.filter2D(img, cv2.CV_64F, Ky) # ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ convolution
    plt.imshow(Gy, cmap='gray')
    plt.title('Gradient Y-axis')
    plt.axis('off')
    plt.show()

    # ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á Gradient (Magnitude)
    G = np.hypot(Gx, Gy)
    G = G / G.max() * 255
    G = G.astype(np.uint8)

    # ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏Ç‡∏≠‡∏á Gradient (Direction)
    theta = np.arctan2(Gy, Gx)

    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•
    cv2.imwrite('../result/sobel_edge_pic.jpg', G)

    # ‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û
    plt.imshow(G, cmap='gray')
    plt.title('Sobel Gradient Magnitude')
    plt.axis('off')
    plt.show()


# --------------------------------------------------------------
def non_maximum_suppression():
    """
    ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö:
    - ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏™‡πâ‡∏ô‡∏Ç‡∏≠‡∏ö‡∏ö‡∏≤‡∏á‡∏•‡∏á ‡πÇ‡∏î‡∏¢‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏û‡∏¥‡∏Å‡πÄ‡∏ã‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ gradient ‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
    - ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡πÉ‡∏ô ../result/nms_pic.jpg
    """
    global nms

    M, N = G.shape
    Z = np.zeros((M, N), dtype=np.uint8)

    # ‡πÅ‡∏õ‡∏•‡∏á‡∏°‡∏∏‡∏°‡∏à‡∏≤‡∏Å radian ‚Üí degree
    angle = theta * 180.0 / np.pi
    angle[angle < 0] += 180

    for i in range(1, M-1):
        for j in range(1, N-1):
            q = 255
            r = 255

            # ‡∏ï‡∏£‡∏ß‡∏à‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏Ç‡∏≠‡∏á gradient ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≤‡∏á‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á
            if (0 <= angle[i,j] < 22.5) or (157.5 <= angle[i,j] <= 180):
                q = G[i, j+1]
                r = G[i, j-1]
            elif (22.5 <= angle[i,j] < 67.5):
                q = G[i+1, j-1]
                r = G[i-1, j+1]
            elif (67.5 <= angle[i,j] < 112.5):
                q = G[i+1, j]
                r = G[i-1, j]
            elif (112.5 <= angle[i,j] < 157.5):
                q = G[i-1, j-1]
                r = G[i+1, j+1]

            # ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡πà‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
            if (G[i,j] >= q) and (G[i,j] >= r):
                Z[i,j] = G[i,j]
            else:
                Z[i,j] = 0

    nms = Z
    cv2.imwrite('../result/nms_pic.jpg', nms)

    plt.imshow(nms, cmap='gray')
    plt.title('After Non-Maximum Suppression')
    plt.axis('off')
    plt.show()


# --------------------------------------------------------------
def double_threshold(low_ratio=0.05, high_ratio=0.15):
    """
    ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö:
    - ‡πÅ‡∏¢‡∏Å‡∏û‡∏¥‡∏Å‡πÄ‡∏ã‡∏•‡∏Ç‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô 3 ‡∏£‡∏∞‡∏î‡∏±‡∏ö:
        1. strong (‡∏Ç‡∏≠‡∏ö‡∏ä‡∏±‡∏î)
        2. weak (‡∏Ç‡∏≠‡∏ö‡∏ö‡∏≤‡∏á)
        3. non-edge (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ç‡∏≠‡∏ö)
    - ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡πÉ‡∏ô ../result/double_threshold_pic.jpg
    """
    global dt, weak, strong

    high_threshold = nms.max() * high_ratio
    low_threshold = high_threshold * low_ratio

    M, N = nms.shape
    dt = np.zeros((M, N), dtype=np.uint8)

    weak = np.uint8(75)
    strong = np.uint8(255)

    strong_i, strong_j = np.where(nms >= high_threshold)
    weak_i, weak_j = np.where((nms <= high_threshold) & (nms >= low_threshold))

    dt[strong_i, strong_j] = strong
    dt[weak_i, weak_j] = weak

    cv2.imwrite('../result/double_threshold_pic.jpg', dt)

    plt.imshow(dt, cmap='gray')
    plt.title('Double Threshold')
    plt.axis('off')
    plt.show()


# --------------------------------------------------------------
def hysteresis():
    """
    ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö:
    - ‡∏ó‡∏≥ Edge Tracking by Hysteresis
    - ‡∏ñ‡πâ‡∏≤‡∏Ç‡∏≠‡∏ö weak ‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏¥‡∏î‡∏Å‡∏±‡∏ö strong ‚Üí ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏ö‡∏à‡∏£‡∏¥‡∏á
    - ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ï‡∏¥‡∏î ‚Üí ‡∏•‡∏ö‡∏ó‡∏¥‡πâ‡∏á
    - ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡πÉ‡∏ô ../result/final_canny_pic.jpg
    """
    global final

    M, N = dt.shape
    img = dt.copy()

    for i in range(1, M-1):
        for j in range(1, N-1):
            if img[i, j] == weak:
                if np.any(img[i-1:i+2, j-1:j+2] == strong):
                    img[i, j] = strong
                else:
                    img[i, j] = 0

    final = img
    cv2.imwrite('../result/final_canny_pic.jpg', final)

    plt.imshow(final, cmap='gray')
    plt.title('Final Canny Edge Detection')
    plt.axis('off')
    plt.show()


# --------------------------------------------------------------
if __name__ == "__main__":
    # üîπ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    grayscale_image('../images/cat.jpg')
    apply_gaussian_blur()
    sobel_edge_detection()
    non_maximum_suppression()
    double_threshold()
    hysteresis()

    print("\n=== ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡∏†‡∏≤‡∏¢‡πÉ‡∏ô G (Gradient Magnitude) ===")
    print(G[:5, :5])  # ‡πÅ‡∏™‡∏î‡∏á 5√ó5 ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ö‡∏ô‡∏ã‡πâ‡∏≤‡∏¢

    print("\n=== ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡∏†‡∏≤‡∏¢‡πÉ‡∏ô Œ∏ (Gradient Direction, ‡∏´‡∏ô‡πà‡∏ß‡∏¢ radian) ===")
    print(theta[:5, :5])  # ‡πÅ‡∏™‡∏î‡∏á 5√ó5 ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ö‡∏ô‡∏ã‡πâ‡∏≤‡∏¢

    print("Canny Edge Detection Completed! Results saved in '../result/'")
